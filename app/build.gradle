apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'

ext.app = [
        'version'            : '4.0.2',
        'version_code'       : 42,
        'compile_sdk_version': 28,
        'min_sdk_version'    : 21,
        'target_sdk_version' : 28
]

android {
    compileSdkVersion app.compile_sdk_version

    defaultConfig {
        applicationId "com.airnow"
        minSdkVersion project.app.min_sdk_version
        targetSdkVersion project.app.target_sdk_version
        versionName project.app.version
        versionCode project.app.version_code
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        multiDexEnabled true

        vectorDrawables.useSupportLibrary true

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    signingConfigs {
        release {
            def Properties rProps = new Properties()
            def rpFile = file('release_signing.properties')
            if (rpFile.canRead()) {
                rProps.load(new FileInputStream(rpFile))

                if (rProps != null && rProps.containsKey('STORE_FILE') && rProps.containsKey('STORE_PASSWORD') &&
                        rProps.containsKey('KEY_ALIAS') && rProps.containsKey('KEY_PASSWORD')) {
                    storeFile = file(rProps['STORE_FILE'])
                    storePassword = rProps['STORE_PASSWORD']
                    keyAlias = rProps['KEY_ALIAS']
                    keyPassword = rProps['KEY_PASSWORD']
                } else {
                    throw new GradleException("release_signing.properties found but some entries are missing")
                }
            } else {
                throw new GradleException("release_signing.properties not found")
            }
        }
        debug {
            def Properties dProps = new Properties()
            def dpFile = file('debug_signing.properties')
            if (dpFile.canRead()) {
                dProps.load(new FileInputStream(dpFile))

                if (dProps != null && dProps.containsKey('STORE_FILE') && dProps.containsKey('STORE_PASSWORD') &&
                        dProps.containsKey('KEY_ALIAS') && dProps.containsKey('KEY_PASSWORD')) {
                    storeFile = file(dProps['STORE_FILE'])
                    storePassword = dProps['STORE_PASSWORD']
                    keyAlias = dProps['KEY_ALIAS']
                    keyPassword = dProps['KEY_PASSWORD']
                } else {
                    throw new GradleException("debug_signing.properties found but some entries are missing")
                }
            } else {
                throw new GradleException("debug_signing.properties not found")
            }
        }
    }

    buildTypes {

        def STRING = "String"

        all {
            buildConfigField STRING, "OPEN_WEATHER_API_KEY", '"f11780da3330643cd659bb6dbb4e44a3"'
            buildConfigField STRING, "OPEN_WEATHER_URL_ICON_BASE", '"http://openweathermap.org/img/w/"'
            buildConfigField STRING, "OPEN_WEATHER_API_URL_BASE", '"https://api.openweathermap.org"'
        }

        debug {
            buildConfigField "Boolean", "DEBUG_MODE", "true"
        }

        release {
            shrinkResources false
            minifyEnabled false
            buildConfigField "Boolean", "DEBUG_MODE", "false"
            signingConfig signingConfigs.release
        }
    }

    dataBinding {
        enabled = true
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }

    sourceSets {
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

androidExtensions {
    experimental = true
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation deps.kotlin.stdlib
    implementation deps.kotlin.coroutines
    implementation deps.material_design
    implementation deps.androidx.core_ktx
    implementation deps.androidx.fragment
    implementation deps.androidx.browser
    implementation deps.androidx.lifecycle
    kapt deps.androidx.lifecycle_compiler
    implementation deps.androidx.paging
    implementation deps.androidx.constraint_layout
    implementation deps.room.runtime
    kapt deps.room.compiler
    implementation deps.dagger.core
    implementation deps.dagger.android
    implementation deps.dagger.android_support
    kapt deps.dagger.compiler
    kapt deps.dagger.processor
    implementation deps.glide.core
    kapt deps.glide.compiler
    implementation deps.retrofit.core
    implementation deps.retrofit.moshi_converter
    implementation deps.retrofit.gson_converter
    implementation deps.retrofit.coroutines_adapter
    implementation deps.okhttp.core
    implementation deps.okhttp.logging_interceptor
    implementation deps.crashlytics
    implementation deps.lottie
    //    implementation deps.firebase.core
    //    implementation deps.firebase.config
    //    implementation deps.firebase.firestore
    implementation deps.jsoup
    implementation deps.gson
    // quick fix for version conflict between room and firestore
    implementation deps.slidinguppanel
    implementation deps.flexbox
    testImplementation deps.mockito
    testImplementation deps.junit
    testImplementation deps.testx.core
    testImplementation deps.arch_testing
    androidTestImplementation deps.arch_testing
    androidTestImplementation deps.testx.core
    androidTestImplementation deps.testx.runner
    androidTestImplementation deps.testx.espresso
    androidTestImplementation deps.testx.rules
    androidTestImplementation deps.testx.monitor
    androidTestImplementation deps.testx.ext
    androidTestImplementation deps.room.testing
    implementation('com.crashlytics.sdk.android:crashlytics:2.9.9@aar') {
        transitive = true;
    }

    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.0.0'
}

apply plugin: 'com.google.gms.google-services'